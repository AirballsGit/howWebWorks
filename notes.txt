Section 1: Intro to the web: 

Goals: 
-High level: What happens when you visit URL in browser
-Explain what IP and DNS are
-Decribe the differnt parts of a URL 
-Describe the request/response cycle 
-Compare GET vs POST requests 


What Happens When...
When I type http://site.com/some/page/html into a browser, what really happens?

This is a common interview question for software engineers. 

Section 2: Networks, Internet, World Wide Web: 

-Networks: A network is a set of computers that can intercommunicate. 
-Internet: The Internet is just a really, really big network.
            The Internet is made up of smaller, "local" networks
-World Wide Web: an information system enababling documents to be 
            accessed over the internet. Documents and downloadable 
            media are made available to the network through web servers 
            and can be accessed by programs such as web browsers. 
            Servers and resources on the World Wide Web are 
            identified and located through character strings 
            called uniform resource locators (URLs).
            **NOT TO BE CONFUSED WITH THE Internet! 


Section 3: IP Addresses: 
"internet protocall" 

-On Networks, computers have an "IP Address" -
a unique address to find that computer on the network. 

Routers: machines connected to routers that connect to networks 


Section 4: DNS: 
"domain name system"
kind of like the phonebook for the web 

Hostnames: 
we often talk to servers by "hostname" - aka google.com 
site.com or computer-a.site.come. 

Thats just a nickname for the server, though -
and the same server can have many hostnames. 

local host = 127.0.0.1 = is special - it's "this computer that you're on".
In addition to their IP addess on the network, all computers
can reach themselves at this address. 

The name localhost always maps to 127.0.0.1 



Section 5: URLS: 
Univeral Resource Locators 

example: http://site.com/some/page.html>x=1

protocol:   Hostname:   Port:   Resource:           Query: 
http        site.com    80      /some/page.html     ?x=1

"protocols" are the conventions and ways of one thing talking to another.
examples of some protocols: 
                            http    
                                -Hypertext Transfer Protcol (standard web) >
                                 (How broswers and servers communicate)
                            https
                                -HTTP Secure > 
                                (How broswers and servers communicate with encryption)
                            
                            ftp
                            -file transfer protocol
                            (an older protocol for sending files over internet)

                            *Many others, but these are the common ones. 

Hostname: google.com, reddit.com, wikipedia.org etc etc 

Port: 
-every server has 65,535 unique "ports" you can talk to 
-think of them as doorways into a castle that let you get into it- 
-usually dont have to specify a port, atleast in broswer > 
Services tent to have a default port 
    for http, is port 80 
    for https, is port 443
    -you dont have to specify in URL unless you want a differnt port >>

resourceList of ports: https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers 


Resource: 
-This always talks to some "web server" program on the server 
    -for some servers, may just have them read and actual file on disk: 
        /some/page.html 
    -for many servers, "dynamically generates" a page 

Query: also known as Query String:

-this provides "extra information" - seach terms, info from forms, etc 
    - The server is provided this info, might use to change page 
    - Sometimes, Javascript will use this information in addition/instead 
multiple arguments are sperarated by &: ?x=1&y=2 
-argument can be given several times: >x=1&x=2 

example: https://developer.mozilla.org/en-US/search?q=css+rainbow (what comes back if i search     
                                                                    "css rainbow" in form on homepage)


Wrap Up: 

http://site.com/some/page.html?x=1 

1. Turn "site.com" into 123.45.67.89
2. Connect to 123.45.67.89
3. On Port 80 (the default)
4. Using the HTTP protocol 
5. Ask for /some/page.html (ask for this specific resource)
6. Pass along query string: x = 1 


Section 6: HTTP Intro: 

just a set of rules on how you comminute between a broswer and a web server 

*when were talking about servers in web devel: we are referring to "web servers"

When we request a webpage, say wikipedia: a request is sent to wikipedias server 

          1                        Request:
                        Web Broswer --------------> Server 

                                //GET // HTTP/1.1 //
                            *request >>>> *Headers* >>>>> Server* 

          2                         Internal Work:
                       Web Broswer  server<--->DB Server

          3                          Response: 
                                             *Headers*
                        Web Broswer <------<html>...<html>----------->Server

Headers: did your request works, language of content sent back etc 

                
Whats in a Request? 

-Method(ex.GET)
-HTTP protocol version (almost always 1.1)
-Resource URL you want 
-Headers 
    -Hostname you're asking about 
    -Date your browser thinks it is
    -Language your broswer wants information in
    -Any cookies that server has sent 
    -And more! 

in console > under network tab > top choice > headers > you'll see your response/request
     headers. Under > Response you'll see what html is being sent back to you 


Response Codes: 

resources: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
           https://en.wikipedia.org/wiki/List_of_HTTP_status_codes 

note: theres more but these are the important ones

200: ok : server telling us 'everythings good, heres the content you wanted'

300s: Redirects
    - What you requested elsewhere: nothings changed you already have this page cached 
    -304: youve already asked for this page, nothing modifed since last viewed, you have it cached 

400s: Client error responses 
404: Not Found: Did not find page youre looking for 

500: Server had an internal problem 


in wrapping: "remember the cycle of the request and getting a response, theres headers on 
both sides in the request/response: 


Section 7: Viewing Request Responses: 

HTTP rest Methods: - GET
                   - POST
                   - Put 
                   - CUSTOM
                   -DELETE 




Section 8: Setting Up A Server:

Serving over HTTP >
    Just opening an HTML file in browser uses file protocol, not http.
    Some things dont work the same (esp security-related stuff)
    Its often useful to start a simple HTTP server for testing 

 if when opening an index.html local file, if i remove the /index.html >
    it will show me all the files within that local folder on the 'file protocol'

You can start a simple, local HTTP server with Python: 
 1. run in terminal:   python 3 -m http.server 
 2. localhost:8000  (or whatever the port is)
 3. http://localhost:8000/notes.txt   (this is an example of opening this file)

 -- if you do http://localhost:8000/kjgewfkjgwe youll get a 404 

 ctrl c should kill the server 


 Section 9: Multiple Requests: 

Come back to this section... ***


Section 10: Methods GET & POST:

-GET: requests without side effects (ie, dont change server data)
    -simply trying to get information, search results, >>
        getting a homepage, dad joke, etc.. We're not saving data or changing >>
        data a server.
    - Typically, argument are passed along in a query string: >
        reddit.com/r/soccer/search/?q=cat
                                    (^)
    - Entering URL in broswer, clicking links, and some form submissions 



-POST: requests with side effects (ie, change data on server)
    -Typically, arguments sent as body of the request(not in query string)
    -Some form submissions(but never entering URL in browser or links)
    -Always do this if theres a side-effect: sending mail, charge credit card etc 
    -"Are you sure you want to resubmit?"








